printf("main started\n");
	// camera
	printf("camera started\n");
	//TODO: doesn't work
	Matrix44f m = Matrix44f(1, 0, 0, 0,
	 						0, 1, 0, 0,
							0, 0, 1, 3,
						 	0, 0, 0, 1).transpose(); // identity

	Camera* camera = new Pinhole(1000,1000,90,m);
	printf("camera done!\n");
	// light
	printf("light started\n");
	LightSource* light = new PointLight(Vec3f(0,0,0),1);
	std::vector<LightSource*> lights = {light};
	printf("light done!\n");
	// shape
	printf("shape started\n");
	Material* mat1 = new BlinnPhong(0.5,10,0.5,0.5,0.5,Vec3f(1,0,0));
	Material* mat2 = new BlinnPhong(0.5,10,0.5,0,0,Vec3f(1));
	Shape* sphere1 = new Sphere(Vec3f(-2,1,-5), 1.5, mat1);
	//Shape* triangle = new Triangle(Vec3f(-2,1,-3), Vec3f(-2,-1,-5), Vec3f(2,-2,-6), mat1);
	Shape* sphere2 = new Sphere(Vec3f(2,0,-5), 2, mat2);
	Shape* plane = new Plane(Vec3f(0,1,0), -1, mat2);
	std::vector<Shape*> shapes = {sphere1, sphere2, plane};
	printf("shape done!\n");
	// scene
	printf("scene started\n");
	Scene* scene = new Scene(lights,shapes,0.25); //TODO: intensity in [0,1]?
	printf("scene done!\n");

	printf("Rendering started\n");
	Vec3f* pixelbuffer = RayTracer::render(camera, scene, 10);

	pixelbuffer = RayTracer::tonemap(pixelbuffer,camera->getWidth()*camera->getHeight());
	char* out = "out.ppm";
	PPMWriter::PPMWriter(camera->getWidth(), camera->getHeight(), pixelbuffer, out);
	printf("Rendering completed\n");
	return 0;
